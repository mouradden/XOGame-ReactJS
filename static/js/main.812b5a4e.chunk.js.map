{"version":3,"sources":["components/Square.js","components/patterns.js","App.js","reportWebVitals.js","index.js"],"names":["Square","val","chooseSquare","className","onClick","Patterns","App","useState","board","setBoard","player","setPlayer","winner","state","result","setResult","useEffect","checkWin","checkIfTie","alert","restartGame","square","map","idx","forEach","currPattern","firstPlayer","foundWinningPattern","filled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.812b5a4e.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../App.css\";\r\n\r\nfunction Square({val, chooseSquare}) {\r\n    return (\r\n        <div className=\"square\" onClick={chooseSquare}>\r\n            {val}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Square;\r\n","export const Patterns = [\r\n    [0,1,2],\r\n    [3,4,5],\r\n    [6,7,8],\r\n    [0,3,6],\r\n    [1,4,7],\r\n    [2,5,8],\r\n    [0,4,8],\r\n    [2,4,6]\r\n];","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Square from './components/Square';\nimport { Patterns } from './components/patterns';\n\nfunction App() {\n  const [board, setBoard]= useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n  const [player, setPlayer]= useState(\"X\");\n  const [result, setResult]= useState({winner: \"none\", state: \"none\"});\n  \n  useEffect(()=>{\n    checkWin();\n    checkIfTie();\n\n    if (player===\"X\"){setPlayer(\"O\");}\n    else{setPlayer(\"X\");}\n  },[board]);\n\n  useEffect(()=>{\n    if(result.state !== \"none\"){\n    alert(`GAME FINISHED, THE WINNER IS: ${result.winner}`);\n    restartGame();\n    }\n  },[result]);\n  \n  const chooseSquare = (square) =>{\n    setBoard(\n      board.map((val, idx)=>{\n      if(idx===square && val===\"\") {return player;}\n    return val;\n    }));\n    \n  };\n\n  \n\n  const checkWin=()=>{\n    Patterns.forEach( (currPattern) =>{\n      const firstPlayer=board[currPattern[0]];\n      if (firstPlayer==\"\") return;\n      let foundWinningPattern=true;\n      currPattern.forEach((idx)=>{\n        if (board[idx] !=firstPlayer){\n          foundWinningPattern=false;\n        }\n      });\n      if (foundWinningPattern){\n        setResult({winner: player, state:\"won\"});\n      }\n    })};\n\n    const checkIfTie = () => {\n      let filled = true;\n      board.forEach((square) => {\n        if (square == \"\") {\n          filled = false;\n        }\n        \n      });\n        if (filled) {\n              setResult({ winner: \"No One\", state: \"Tie\" });\n            }\n      \n    };\n    const restartGame = () => {\n      setBoard([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n      setPlayer(\"O\");\n    };\n  return (\n    <div className=\"App\">\n      <div className=\"board\">\n        <div className=\"row\">\n           <Square val={board[0]} chooseSquare={()=> {chooseSquare(0);}}/>\n           <Square val={board[1]} chooseSquare={()=> {chooseSquare(1);}}/>\n           <Square val={board[2]} chooseSquare={()=> {chooseSquare(2);}}/>\n           \n        </div>\n        <div className=\"row\">\n            <Square  val={board[3]} chooseSquare={()=> {chooseSquare(3);}}/>\n            <Square val={board[4]} chooseSquare={()=> {chooseSquare(4);}}/>\n            <Square val={board[5]} chooseSquare={()=> {chooseSquare(5);}}/>\n        </div>\n        <div className=\"row\">\n            <Square  val={board[6]} chooseSquare={()=> {chooseSquare(6);}}/>\n            <Square val={board[7]} chooseSquare={()=> {chooseSquare(7);}}/>\n            <Square val={board[8]} chooseSquare={()=> {chooseSquare  (8);}}/>\n            \n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}